#######################inputs##############################
RAM_0 = [337, 337, 337, 337, 767, 767, 767, 767, 337, 337, 337, 337, 767, 767, 767, 767, 530, 634, 490, 674, 495, 495, 495, 495, 669, 669, 669, 669, 530, 634, 490, 674, 490, 674, 495, 495, 495, 495, 669, 669, 669, 669, 311, 639, 639, 311]
PTDF_0 = [[-0.04738, -0.04833, 0.00676, -0.04705, -0.01609, -0.04637, -0.04486, 0.00115, 0.00144, -0.04773, -0.01965, 2e-05, 0.00253, -0.00261], [-0.04738, -0.04833, 0.00676, -0.04705, -0.01609, -0.04637, -0.04486, 0.00115, 0.00144, -0.04773, -0.01965, 2e-05, 0.00253, -0.00261], [-0.04738, -0.04833, 0.00676, -0.04705, -0.01609, -0.04637, -0.04486, 0.00115, 0.00144, -0.04773, -0.01965, 2e-05, 0.00253, -0.00261], [-0.04738, -0.04833, 0.00676, -0.04705, -0.01609, -0.04637, -0.04486, 0.00115, 0.00144, -0.04773, -0.01965, 2e-05, 0.00253, -0.00261], [0.04738, 0.04833, -0.00676, 0.04705, 0.01609, 0.04637, 0.04486, -0.00115, -0.00144, 0.04773, 0.01965, -2e-05, -0.00253, 0.00261], [0.04738, 0.04833, -0.00676, 0.04705, 0.01609, 0.04637, 0.04486, -0.00115, -0.00144, 0.04773, 0.01965, -2e-05, -0.00253, 0.00261], [0.04738, 0.04833, -0.00676, 0.04705, 0.01609, 0.04637, 0.04486, -0.00115, -0.00144, 0.04773, 0.01965, -2e-05, -0.00253, 0.00261], [0.04738, 0.04833, -0.00676, 0.04705, 0.01609, 0.04637, 0.04486, -0.00115, -0.00144, 0.04773, 0.01965, -2e-05, -0.00253, 0.00261], [-0.04739, -0.04834, 0.00676, -0.04705, -0.0161, -0.04638, -0.04487, 0.00115, 0.00144, -0.04774, -0.01966, 2e-05, 0.00253, -0.00261], [-0.04739, -0.04834, 0.00676, -0.04705, -0.0161, -0.04638, -0.04487, 0.00115, 0.00144, -0.04774, -0.01966, 2e-05, 0.00253, -0.00261], [-0.04739, -0.04834, 0.00676, -0.04705, -0.0161, -0.04638, -0.04487, 0.00115, 0.00144, -0.04774, -0.01966, 2e-05, 0.00253, -0.00261], [-0.04739, -0.04834, 0.00676, -0.04705, -0.0161, -0.04638, -0.04487, 0.00115, 0.00144, -0.04774, -0.01966, 2e-05, 0.00253, -0.00261], [0.04739, 0.04834, -0.00676, 0.04705, 0.0161, 0.04638, 0.04487, -0.00115, -0.00144, 0.04774, 0.01966, -2e-05, -0.00253, 0.00261], [0.04739, 0.04834, -0.00676, 0.04705, 0.0161, 0.04638, 0.04487, -0.00115, -0.00144, 0.04774, 0.01966, -2e-05, -0.00253, 0.00261], [0.04739, 0.04834, -0.00676, 0.04705, 0.0161, 0.04638, 0.04487, -0.00115, -0.00144, 0.04774, 0.01966, -2e-05, -0.00253, 0.00261], [0.04739, 0.04834, -0.00676, 0.04705, 0.0161, 0.04638, 0.04487, -0.00115, -0.00144, 0.04774, 0.01966, -2e-05, -0.00253, 0.00261], [-0.02331, -0.02295, 0.03853, -0.02343, -0.00778, -0.02575, -0.02415, 0.00217, -0.00022, -0.02284, -0.00898, -0.00012, 0.0043, -0.00256], [0.02331, 0.02295, -0.03853, 0.02343, 0.00778, 0.02575, 0.02415, -0.00217, 0.00022, 0.02284, 0.00898, 0.00012, -0.0043, 0.00256], [-0.02958, -0.02909, 0.04681, -0.02974, -0.00978, -0.03219, -0.03071, 0.00271, -0.00027, -0.02897, -0.01133, -0.00014, 0.00541, -0.00321], [0.02958, 0.02909, -0.04681, 0.02974, 0.00978, 0.03219, 0.03071, -0.00271, 0.00027, 0.02897, 0.01133, 0.00014, -0.00541, 0.00321], [-0.03518, -0.03463, 0.05837, -0.03536, -0.01175, -0.03888, -0.03644, 0.00327, -0.00033, -0.03447, -0.01356, -0.00018, 0.0065, -0.00386], [-0.03518, -0.03463, 0.05837, -0.03536, -0.01175, -0.03888, -0.03644, 0.00327, -0.00033, -0.03447, -0.01356, -0.00018, 0.0065, -0.00386], [-0.03518, -0.03463, 0.05837, -0.03536, -0.01175, -0.03888, -0.03644, 0.00327, -0.00033, -0.03447, -0.01356, -0.00018, 0.0065, -0.00386], [-0.03518, -0.03463, 0.05837, -0.03536, -0.01175, -0.03888, -0.03644, 0.00327, -0.00033, -0.03447, -0.01356, -0.00018, 0.0065, -0.00386], [0.03518, 0.03463, -0.05837, 0.03536, 0.01175, 0.03888, 0.03644, -0.00327, 0.00033, 0.03447, 0.01356, 0.00018, -0.0065, 0.00386], [0.03518, 0.03463, -0.05837, 0.03536, 0.01175, 0.03888, 0.03644, -0.00327, 0.00033, 0.03447, 0.01356, 0.00018, -0.0065, 0.00386], [0.03518, 0.03463, -0.05837, 0.03536, 0.01175, 0.03888, 0.03644, -0.00327, 0.00033, 0.03447, 0.01356, 0.00018, -0.0065, 0.00386], [0.03518, 0.03463, -0.05837, 0.03536, 0.01175, 0.03888, 0.03644, -0.00327, 0.00033, 0.03447, 0.01356, 0.00018, -0.0065, 0.00386], [-0.02331, -0.02295, 0.03853, -0.02343, -0.00778, -0.02575, -0.02415, 0.00217, -0.00022, -0.02284, -0.00898, -0.00012, 0.0043, -0.00256], [0.02331, 0.02295, -0.03853, 0.02343, 0.00778, 0.02575, 0.02415, -0.00217, 0.00022, 0.02284, 0.00898, 0.00012, -0.0043, 0.00256], [-0.02958, -0.02909, 0.04681, -0.02974, -0.00978, -0.03219, -0.03071, 0.00271, -0.00027, -0.02897, -0.01133, -0.00014, 0.00541, -0.00321], [0.02958, 0.02909, -0.04681, 0.02974, 0.00978, 0.03219, 0.03071, -0.00271, 0.00027, 0.02897, 0.01133, 0.00014, -0.00541, 0.00321], [-0.02958, -0.02909, 0.04681, -0.02974, -0.00978, -0.03219, -0.03071, 0.00271, -0.00027, -0.02897, -0.01133, -0.00014, 0.00541, -0.00321], [0.02958, 0.02909, -0.04681, 0.02974, 0.00978, 0.03219, 0.03071, -0.00271, 0.00027, 0.02897, 0.01133, 0.00014, -0.00541, 0.00321], [-0.03518, -0.03463, 0.05837, -0.03536, -0.01175, -0.03888, -0.03644, 0.00327, -0.00033, -0.03447, -0.01356, -0.00018, 0.0065, -0.00386], [-0.03518, -0.03463, 0.05837, -0.03536, -0.01175, -0.03888, -0.03644, 0.00327, -0.00033, -0.03447, -0.01356, -0.00018, 0.0065, -0.00386], [-0.03518, -0.03463, 0.05837, -0.03536, -0.01175, -0.03888, -0.03644, 0.00327, -0.00033, -0.03447, -0.01356, -0.00018, 0.0065, -0.00386], [-0.03518, -0.03463, 0.05837, -0.03536, -0.01175, -0.03888, -0.03644, 0.00327, -0.00033, -0.03447, -0.01356, -0.00018, 0.0065, -0.00386], [0.03518, 0.03463, -0.05837, 0.03536, 0.01175, 0.03888, 0.03644, -0.00327, 0.00033, 0.03447, 0.01356, 0.00018, -0.0065, 0.00386], [0.03518, 0.03463, -0.05837, 0.03536, 0.01175, 0.03888, 0.03644, -0.00327, 0.00033, 0.03447, 0.01356, 0.00018, -0.0065, 0.00386], [0.03518, 0.03463, -0.05837, 0.03536, 0.01175, 0.03888, 0.03644, -0.00327, 0.00033, 0.03447, 0.01356, 0.00018, -0.0065, 0.00386], [0.03518, 0.03463, -0.05837, 0.03536, 0.01175, 0.03888, 0.03644, -0.00327, 0.00033, 0.03447, 0.01356, 0.00018, -0.0065, 0.00386], [-0.0259, -0.02603, 0.05111, -0.02583, -0.00805, -0.01332, -0.02527, 0.00238, -0.00027, -0.02555, -0.00972, -0.00013, 0.00457, -0.00274], [0.0259, 0.02603, -0.05111, 0.02583, 0.00805, 0.01332, 0.02527, -0.00238, 0.00027, 0.02555, 0.00972, 0.00013, -0.00457, 0.00274], [0.0259, 0.02603, -0.05111, 0.02583, 0.00805, 0.01332, 0.02527, -0.00238, 0.00027, 0.02555, 0.00972, 0.00013, -0.00457, 0.00274], [-0.0259, -0.02603, 0.05111, -0.02583, -0.00805, -0.01332, -0.02527, 0.00238, -0.00027, -0.02555, -0.00972, -0.00013, 0.00457, -0.00274]]

max_ATC = 0 # MW introduced by TSO (not applicable every time)
               # put max_ATC = 0 if this value has not been introduced by TSO

ATC_0 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

##########################################################

difference = 1
positive_PTDF = []
positive_PTDF_final = []
positive_RAM = []
negative_RAM = []
for i in range(0, len(PTDF_0)):
    for j in range(0,  len(PTDF_0[i])):
        if PTDF_0[i][j] > 0:
            positive_PTDF.append(PTDF_0[i][j])
    positive_PTDF_final.append(positive_PTDF)
    positive_PTDF = []

pos_PTDF = []
neg_PTDF = []
pos_ATC = []
neg_ATC = []
for i in range(0, len(RAM_0)):
    if RAM_0[i] > 0:
        positive_RAM.append(RAM_0[i])
        pos_PTDF.append(positive_PTDF_final[i])
        pos_ATC.append(ATC_0[i])
    else:
        negative_RAM.append(RAM_0[i])
        neg_PTDF.append(positive_PTDF_final[i])
        neg_ATC.append(ATC_0[i])

contains_negative_RAM = False
for i in range(0, len(RAM_0)):
    if RAM_0[i] <  0:
        contains_negative_RAM = True
if contains_negative_RAM == True:
    ################# For Negative RAM ###################
    ATC_neg_before_SF = []
    ATC_neg_before_SF_final = []

    deno = 0
    deno_list = []
    for i in range(0, len(neg_PTDF)):
        for j in range(0, len(neg_PTDF[i])):
            deno = deno + neg_PTDF[i][j] ** 2
        deno_list.append(deno)
        deno = 0


    neg_ATC = []
    neg_ATC_final = []
    neg_ATC_final_min = []
    for i in range(0, len(neg_PTDF)):
        for j in range(0, len(neg_PTDF[i])):
            neg_ATC.append((neg_PTDF[i][j] / deno_list[i]) * negative_RAM[i])
        neg_ATC_final.append(neg_ATC)
        neg_ATC_final_min.append(min(neg_ATC))
        neg_ATC = []

    sf_deno = 0
    sf_list = []
    for i in range(0, len(neg_ATC_final)):
        for j in range(0 , len(neg_ATC_final[i])):
            sf_deno = sf_deno +  neg_PTDF[i][j] * neg_ATC_final[i][j]

        sf = negative_RAM[i] / sf_deno
        sf_list.append(sf)
        sf_deno = 0

    final_sf = max(sf_list)

    negative_ATC = []
    for i in range(0 , len(neg_ATC_final_min)):
        negative_ATC.append(neg_ATC_final_min[i] * final_sf)

    final_negative_ATC = round(min(negative_ATC))




################# End of Negative RAM ################


################# Positive RAM ########################
non_negative_ptdf_1d = []
non_negative_ptdf_2d = []

for i in range(0, len(PTDF_0)):
    for j in range(0, len(PTDF_0[i])):
        if PTDF_0[i][j] < 0:
            non_negative_ptdf_1d.append(0)
        else:
            non_negative_ptdf_1d.append(PTDF_0[i][j])
    non_negative_ptdf_2d.append(non_negative_ptdf_1d)
    non_negative_ptdf_1d = []


while difference > 0.001:
    # Step 1 : maximize RAM and 0
    max_RAM = []
    for i in range(0, len(RAM_0)):
        if RAM_0[i] > 0:
            max_RAM.append(RAM_0[i])
        else:
            max_RAM.append(0)
    # output of this step is  max_RAM
    # End of Step 1

    # Step 2 - Calculate RAM
    calc = 0
    ATC_ini_mul = []
    RAM_ini = []

    for i in range(0 , len(non_negative_ptdf_2d)):
        for j in range(0, len(non_negative_ptdf_2d[i])):
            calc = calc + non_negative_ptdf_2d[i][j] * ATC_0[i]
        ATC_ini_mul.append(calc)
        calc = 0



    for i in range(0, len(max_RAM)):
        if max_RAM[i] - ATC_ini_mul[i] < 0 :
            RAM_ini.append(0)

        else:
            RAM_ini.append(max_RAM[i] - ATC_ini_mul[i])
    zero = []

    for i in range(0,len(ATC_0)):
        zero.append(0)
    if RAM_ini == zero:
        break

    # Output of this step is RAM_ini
    # End of step 2



    #Step 3 share RAM equally among Core-oriented bidding zone borders:


    ATC_1d = []
    ATC_2d = []
    ATC_min = []
    for i in range(0, len(positive_PTDF_final)):
        for j in range(0, len(positive_PTDF_final[i])):
            if RAM_ini[i] == 0 and positive_PTDF_final[i][j] == 0:
                ATC_1d.append(0)
            else:
                ATC_1d.append(RAM_ini[i]/positive_PTDF_final[i][j])
        ATC_2d.append(ATC_1d)
        ATC_1d = []

    # output of this step is ATC_2d
    # End of step 3

    # step 4 - Calculate maximum additional bilateral exchanges

    for i in range(0, len(ATC_2d)):
        ATC_min.append(min(ATC_2d[i]))


    #output of this step is ATC_min
    #End of step 4

    # Step 5 calculate ATC
    added_ATC = []

    for i in range(0, len(ATC_min)):
        added_ATC.append(ATC_0[i] + ATC_min[i])


    # End of step 5


    # step 6
    limited_ATC = []
    if max_ATC != 0:
        for i in range(0, len(added_ATC)):
            if added_ATC[i] > max_ATC:
                limited_ATC.append(max_ATC)
            else:
                limited_ATC.append(added_ATC[i])
    else:
        limited_ATC = added_ATC

    # Output of this step is limited_ATC
    # End of step 6

    # Step 7 -  Check convergence
    sum_of_new_ATC = 0
    sum_of_old_ATC = 0
    for i in range(0, len(limited_ATC)):
        sum_of_new_ATC = sum_of_new_ATC + limited_ATC[i]

    for i in range(0, len(ATC_0)):
        sum_of_new_ATC = sum_of_new_ATC + ATC_0[i]

    difference = sum_of_new_ATC - sum_of_old_ATC
    ATC_0 = limited_ATC
    RAM_0 = RAM_ini




    #End of step 7

    ################# End of Positive RAM ########################

if contains_negative_RAM == True:
    print(min(final_negative_ATC , min(ATC_0)))
else:
    print(min(round(ATC_0)))
